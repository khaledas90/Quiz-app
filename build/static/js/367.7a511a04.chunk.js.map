{"version":3,"file":"static/js/367.7a511a04.chunk.js","mappings":"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","sources":["component/play.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { GiLifeBar } from \"react-icons/gi\";\r\nimport { FaLightbulb } from \"react-icons/fa6\";\r\nimport { CiClock1 } from \"react-icons/ci\";\r\nimport questionsData from '../questions.json';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport correct from '../assets/sound/correct.mp3';\r\nimport wrong from '../assets/sound/wrong.mp3';\r\nimport clickBtn from '../assets/sound/click.mp3';\r\nimport Swal from 'sweetalert2';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\n\r\nconst isEmpty = (value) => {\r\n    return value === undefined ||\r\n        value === null ||\r\n        (typeof value === 'object' && Object.keys(value).length === 0) ||\r\n        (typeof value === 'string' && value.trim().length === 0);\r\n};\r\n\r\nexport default function Play() {\r\n    const navigate = useNavigate();\r\n    const correctSoundRef = useRef(null);\r\n    const wrongSoundRef = useRef(null);\r\n    const clickBtnRef = useRef(null);\r\n    const intervalRef = useRef(null);\r\n    const [questions, setQuestions] = useState(questionsData);\r\n    const [currentQuestion, setCurrentQuestion] = useState({});\r\n    const [nextQuestion, setNextQuestion] = useState({});\r\n    const [previousQuestion, setPreviousQuestion] = useState({});\r\n    const [answer, setAnswer] = useState('');\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [score, setScore] = useState(0);\r\n    const [correctAnswers, setCorrectAnswers] = useState(0);\r\n    const [wrongAnswers, setWrongAnswers] = useState(0);\r\n    const [hints, setHints] = useState(5);\r\n    const [fiftyFifty, setFiftyFifty] = useState(2);\r\n    const [usedFiftyFifty, setUsedFiftyFifty] = useState(false);\r\n    const [time, setTime] = useState({ minutes: 2, seconds: 0 });\r\n    const [nextButtonDisabled, setNextButtonDisabled] = useState(false);\r\n    const [previousButtonDisabled, setPreviousButtonDisabled] = useState(true);\r\n    const [Finished, setFinished] = useState(false);\r\n    useEffect(() => {\r\n        if (!isEmpty(questions) && questions.length > 0) {\r\n            const current = questions[currentQuestionIndex];\r\n            const next = questions[currentQuestionIndex + 1] || {};\r\n            const previous = questions[currentQuestionIndex - 1] || {};\r\n\r\n            setCurrentQuestion(current);\r\n            setNextQuestion(next);\r\n            setPreviousQuestion(previous);\r\n            setAnswer(current?.answer || '');\r\n            document.querySelectorAll('.option').forEach(element => {\r\n                element.style.visibility = \"visible\";\r\n            });\r\n            handleTimer();\r\n            handleDisableButton();\r\n        }\r\n        return () => {\r\n            clearInterval(intervalRef.current); \r\n        };\r\n    }, [questions, currentQuestionIndex]);\r\n\r\n    const handlePrevious = () => {\r\n        if (currentQuestionIndex > 0) {\r\n            setCurrentQuestionIndex(currentQuestionIndex - 1);\r\n        }\r\n        playAudio(clickBtnRef);\r\n    };\r\n\r\n    const handleNext = () => {\r\n        if (currentQuestionIndex < questions.length - 1) {\r\n            setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n        } else {\r\n            toast.success(`Quiz Completed`, {\r\n                position: \"top-center\",\r\n                autoClose: 1000,\r\n            });\r\n            EndQuiz();\r\n        }\r\n        playAudio(clickBtnRef);\r\n    };\r\n\r\n    const handleDisableButton = () => {\r\n        setPreviousButtonDisabled(currentQuestionIndex === 0);\r\n        setNextButtonDisabled(currentQuestionIndex === questions.length - 1);\r\n    };\r\n\r\n    const handleClick = (option) => {\r\n        if (option === answer) {\r\n            toast.success(`Correct Answer`, {\r\n                position: \"top-center\",\r\n                autoClose: 1000,\r\n            });\r\n            setScore(score + 1);\r\n            setCorrectAnswers(correctAnswers + 1);\r\n            playAudio(correctSoundRef);\r\n        } else {\r\n            toast.error(`Wrong Answer`, {\r\n                position: \"top-center\",\r\n                autoClose: 1000,\r\n            });\r\n            setWrongAnswers(wrongAnswers + 1);\r\n            playAudio(wrongSoundRef);\r\n        }\r\n        \r\n        if (currentQuestionIndex < questions.length - 1) {\r\n            setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n        } else {\r\n            toast.success('Quiz Completed', {\r\n                position: \"top-center\",\r\n                autoClose: 1000,\r\n            });\r\n    navigate('/Summary');\r\n            EndQuiz(); \r\n        }\r\n    };\r\n    \r\n    \r\n    const handleQuit = () => {\r\n        const swalWithBootstrapButtons = Swal.mixin({\r\n            customClass: {\r\n                confirmButton: \"btn btn-success\",\r\n                cancelButton: \"btn btn-danger\"\r\n            },\r\n            buttonsStyling: false\r\n        });\r\n        swalWithBootstrapButtons.fire({\r\n            title: \"Are you sure?\",\r\n            icon: \"warning\",\r\n            showCancelButton: true,\r\n            confirmButtonText: \"Yes\",\r\n            cancelButtonText: \"No\",\r\n            reverseButtons: true\r\n        }).then((result) => {\r\n            if (result.isConfirmed) {\r\n                swalWithBootstrapButtons.fire({\r\n                    title: \"Exited\",\r\n                    text: \"You have successfully exited the exam.\",\r\n                    icon: \"success\"\r\n                });\r\n                navigate('/');\r\n            } else if (result.dismiss === Swal.DismissReason.cancel) {\r\n                swalWithBootstrapButtons.fire({\r\n                    title: \"Cancelled\",\r\n                    text: \"You can continue :)\",\r\n                    icon: \"error\"\r\n                });\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleHints = () => {\r\n        if (hints > 0) {\r\n            let options = Array.from(document.querySelectorAll('.option'));\r\n            let indexOfAnswer;\r\n\r\n            options.forEach((element, index) => {\r\n                if (element.innerHTML === answer) {\r\n                    indexOfAnswer = index;\r\n                }\r\n            });\r\n\r\n            let hiddenCount = 0;\r\n\r\n            while (hiddenCount < 1) {\r\n                const randNumber = Math.floor(Math.random() * options.length);\r\n\r\n                if (randNumber !== indexOfAnswer && options[randNumber].style.visibility !== \"hidden\") {\r\n                    options[randNumber].style.visibility = \"hidden\";\r\n                    hiddenCount++;\r\n                }\r\n            }\r\n\r\n            setHints(hints - 1);\r\n        } else {\r\n            toast.warn(\"No hints left\", {\r\n                position: \"top-center\",\r\n                autoClose: 1000,\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleFiftyFifty = () => {\r\n        if (fiftyFifty > 0 ) {\r\n            const options = Array.from(document.querySelectorAll('.option'));\r\n            let indexOfAnswer;\r\n\r\n            options.forEach((option, index) => {\r\n                if (option.innerHTML === answer) {\r\n                    indexOfAnswer = index;\r\n                }\r\n            });\r\n\r\n            let hiddenCount = 0;\r\n\r\n            while (hiddenCount < 2) {\r\n                const randNumber = Math.floor(Math.random() * options.length);\r\n                if (randNumber !== indexOfAnswer && options[randNumber].style.visibility !== \"hidden\") {\r\n                    options[randNumber].style.visibility = \"hidden\";\r\n                    hiddenCount++;\r\n                }\r\n            }\r\n\r\n            setFiftyFifty(fiftyFifty - 1);\r\n            setUsedFiftyFifty(true);\r\n        } else {\r\n            toast.warn(\"No Fifty Fifty left\", {\r\n                position: \"top-center\",\r\n                autoClose: 1000,\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleTimer = () => {\r\n        const countDownTime = Date.now() + (time.minutes * 60 + time.seconds) * 1000; \r\n        intervalRef.current = setInterval(() => {\r\n            const now = new Date().getTime();\r\n            const distance = countDownTime - now;\r\n\r\n            const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\r\n            const seconds = Math.floor((distance % (1000 * 60)) / 1000);\r\n\r\n            if (distance < 0) {\r\n                clearInterval(intervalRef.current);\r\n                setTime({ minutes: 0, seconds: 0 });\r\n                Swal.fire(\"Time Up! Your exam has ended.\");\r\n                navigate('/');\r\n                EndQuiz();\r\n            } else {\r\n                setTime({ minutes, seconds });\r\n            }\r\n        }, 1000);\r\n    };\r\n\r\n    const playAudio = (audioRef) => {\r\n        if (audioRef.current) {\r\n            audioRef.current.play().catch(error => {\r\n                console.error(\"Error playing audio:\", error);\r\n            });\r\n        }\r\n    };\r\n\r\n    const EndQuiz = () => {\r\n        const playResult = {\r\n            score: score,\r\n            totalQuestions: questions.length,\r\n            numberOfAttemptedQuestions: questions.length - wrongAnswers,\r\n            numberOfUnAttemptedQuestions: wrongAnswers,\r\n            correctAnswers: correctAnswers,\r\n            wrongAnswers: wrongAnswers,\r\n            hints: 5 - hints,\r\n            fiftyFifty: 2 - fiftyFifty,\r\n            time: time.minutes + \":\" + time.seconds\r\n        }\r\n        localStorage.setItem(\"playResult\", JSON.stringify(playResult));\r\n        setFinished(true);\r\n        console.log(playResult);\r\n    };\r\nconst handleFinish = () => {\r\n    navigate('/Summary');\r\n}\r\n    return (\r\n        <>\r\n            <Helmet><title>Play</title></Helmet>\r\n            <>\r\n                <audio id='clickBtn' ref={clickBtnRef} src={clickBtn}></audio>\r\n                <audio id='correct' ref={correctSoundRef} src={correct}></audio>\r\n                <audio id='wrong' ref={wrongSoundRef} src={wrong}></audio>\r\n            </>\r\n            <div className=\"play\">\r\n                <div className=\"container\">\r\n                    <div className=\"questions p-3\">\r\n                        <div className=\"lifeline-container d-flex align-items-center justify-content-between mb-2\">\r\n                            <div className='d-flex align-items-center' onClick={handleFiftyFifty}>\r\n                                <GiLifeBar />\r\n                                <p className='ms-2 text-bold'>{fiftyFifty}</p>\r\n                            </div>\r\n                            <div className='d-flex align-items-center' onClick={handleHints}>\r\n                                <FaLightbulb />\r\n                                <p>{hints}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"overall-container d-flex align-items-center justify-content-between\">\r\n                            <p>{currentQuestionIndex + 1}/{questions.length}</p>\r\n                            <p className='d-flex align-items-center'>{time.minutes}:{time.seconds < 10 ? `0${time.seconds}` : time.seconds} <CiClock1 /></p>\r\n                        </div>\r\n                        <h3 className='text-center text-bold'>\r\n                            {currentQuestion?.question || \"Loading question...\"}\r\n                        </h3>\r\n                        <div className=\"row mt-5 mb-5\">\r\n                            {currentQuestion.options && currentQuestion.options.map((option, index) => (\r\n                                <div key={index} className=\"col-lg-6 option-container\">\r\n                                    <div \r\n                                        className=\"option\" \r\n                                        onClick={() => handleClick(option)}\r\n                                    >\r\n                                        {option}\r\n                                    </div>\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n\r\n                        <div className=\"button-container mt-5 d-flex justify-content-between\">\r\n                           \r\n                            <div className=\"d-flex align-items-center\">\r\n                                <button onClick={handlePrevious}   className={`me-3 previous ${previousButtonDisabled ? 'disabled' : ''} `}>Previous</button>\r\n                                <button onClick={handleNext}  className={`me-3 next ${nextButtonDisabled ? 'disabled' : ''} `}>Next</button>\r\n                               {Finished && <button to=\"/\" onClick={handleFinish} className={`me-3 next  `}>Finish</button>} \r\n                            </div>\r\n                            <button className=\"quit\" onClick={handleQuit}>Quit</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <ToastContainer />\r\n        </>\r\n    );\r\n}\r\n"],"names":["isEmpty","value","undefined","Object","keys","length","trim","Play","navigate","useNavigate","correctSoundRef","useRef","wrongSoundRef","clickBtnRef","intervalRef","questions","setQuestions","useState","questionsData","currentQuestion","setCurrentQuestion","nextQuestion","setNextQuestion","previousQuestion","setPreviousQuestion","answer","setAnswer","currentQuestionIndex","setCurrentQuestionIndex","score","setScore","correctAnswers","setCorrectAnswers","wrongAnswers","setWrongAnswers","hints","setHints","fiftyFifty","setFiftyFifty","usedFiftyFifty","setUsedFiftyFifty","time","setTime","minutes","seconds","nextButtonDisabled","setNextButtonDisabled","previousButtonDisabled","setPreviousButtonDisabled","Finished","setFinished","useEffect","current","next","previous","document","querySelectorAll","forEach","element","style","visibility","handleTimer","handleDisableButton","clearInterval","countDownTime","Date","now","setInterval","getTime","distance","Math","floor","Swal","EndQuiz","playAudio","audioRef","play","catch","error","console","playResult","totalQuestions","numberOfAttemptedQuestions","numberOfUnAttemptedQuestions","localStorage","setItem","JSON","stringify","log","_jsxs","_Fragment","children","_jsx","Helmet","id","ref","src","clickBtn","correct","wrong","className","onClick","handleFiftyFifty","options","Array","from","indexOfAnswer","option","index","innerHTML","hiddenCount","randNumber","random","toast","warn","position","autoClose","GiLifeBar","handleHints","FaLightbulb","CiClock1","question","map","success","handleClick","handlePrevious","handleNext","to","handleFinish","handleQuit","swalWithBootstrapButtons","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","icon","showCancelButton","confirmButtonText","cancelButtonText","reverseButtons","then","result","isConfirmed","text","dismiss","cancel","ToastContainer"],"sourceRoot":""}